%%
% File: Traffic_Sign_CNN.m
%   Load the tranining and test data sets. Use the convolutional neural
%   network classifier to train and test the model. 
%
% Info:
%   Class: EN.525.670.81 - Machine Learning for Signal Processing
%   Term: Spring 2020
%   Author: Cassie Xia
%

%%
% clear workspace
clear all; close all; clc;

%% 1. Load the training data.
sBasePath = fullfile(fileparts(fullfile(mfilename('fullpath'))),'..','gtsrb-german-traffic-sign/');

sTrainingPath = [sBasePath, 'Train.csv'];

% Find signstrain.mat and signstest.mat
% If not found generate them
curDir = pwd;
filename = [curDir,'/','signstrain.mat'];

if isfile(filename)
    signstrain = load(filename);
else
    % generate matfile
    signstrain = generate_csv2mat(sTrainingPath,filename);
end

%% 2. Load the test data

sTestPath = [sBasePath, 'Test.csv'];

filename = [curDir,'/','signstest.mat'];

if isfile(filename)
    signstest = load(filename);
else
    % generate matfile
    signstest = generate_csv2mat(sTestPath,filename,'imPreProcess',true);
end

% Set train and test data
tr_images = signstrain.A;
tr_labels = signstrain.classes;

test_images = signstest.A;
%test_images = signstest.B;
test_labels = signstest.classes;

% Perform dimensionality reduction
numBasis = 120;
[V, D] = pca_basis(tr_images,numBasis);

% Projections
train_projection = tr_images*V;
test_projection = test_images*V;

% Set labels for CNN
train_cnn_labels = zeros(length(tr_labels),max(tr_labels)+1);
for i=1:length(tr_labels)
   train_cnn_labels(i,tr_labels(i)+1) = 1; 
end

%% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 30-Apr-2020 00:47:16
%
% This script assumes these variables are defined:
%
%   train_projection - input data.
%   train_cnn_labels - target data.

x = train_projection';
t = train_cnn_labels';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

% % Deployment
% % Change the (false) values to (true) to enable the following code blocks.
% % See the help for each generation function for more information.
% if (false)
%     % Generate MATLAB function for neural network for application
%     % deployment in MATLAB scripts or with MATLAB Compiler and Builder
%     % tools, or simply to examine the calculations your trained neural
%     % network performs.
%     genFunction(net,'myNeuralNetworkFunction');
%     y = myNeuralNetworkFunction(x);
% end
% if (false)
%     % Generate a matrix-only MATLAB function for neural network code
%     % generation with MATLAB Coder tools.
%     genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
%     y = myNeuralNetworkFunction(x);
% end
% if (false)
%     % Generate a Simulink diagram for simulation or deployment with.
%     % Simulink Coder tools.
%     gensim(net);
% end


